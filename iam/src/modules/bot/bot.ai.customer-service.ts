// Ganjool Support Bot - UI Enhanced Version
import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';
import { IamService } from '../iam/services/iam.service';
import { DataService } from '../data/service/data.service';
import { SupportChatLogDto } from '../data/database/dto/support-chat-log.dto';
import { Types } from 'mongoose';
import OpenAI from 'openai';
import { KnowledgeItemService } from '../data/service/knowledge-item.service';

const adminTelegramIds = process.env.TELEGRAM_ADMIN_IDS?.split(',') || [];

// üîê In-memory lock status per user
const unlockedUsers = new Set<string>();
const contactRequested = new Set<string>(); // Track users who have been asked for contact

@Injectable()
export class CustomerSupportBot implements OnModuleInit {
  private bot: TelegramBot;
  private readonly logger = new Logger(CustomerSupportBot.name);
  private readonly botToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
  private readonly openai = new OpenAI({ apiKey: process.env.CHATGPT_API_KEY_CRM });

  constructor(
    private readonly iamService: IamService,
    private readonly dataService: DataService,
    private readonly knowledgeService: KnowledgeItemService,
  ) {
    const TelegramBotConstructor = (TelegramBot as any).default || TelegramBot;
    this.bot = new TelegramBotConstructor(this.botToken, { polling: true });
  }

  async onModuleInit() {
    const me = await this.bot.getMe();
    console.log(`Ganjool Bot started: @${me.username}`);

    // üìå Handle /start command
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramID = msg.from?.id?.toString();
      if (!telegramID) return;

      const userEntity = await this.iamService.findUserByTelegramID(telegramID);
      if (!userEntity || !userEntity.mobile) {
        if (!contactRequested.has(telegramID)) {
          const sent = await this.bot.sendMessage(chatId, 'ÿ®ÿ±ÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÑÿ∑ŸÅÿßŸã ÿ¥ŸÖÿßÿ±Ÿá ŸÖŸàÿ®ÿß€åŸÑ ÿÆŸàÿØ ÿ±ÿß ÿ®Ÿá ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®⁄Øÿ∞ÿßÿ±€åÿØ.', {
            reply_markup: {
              keyboard: [
                [
                  {
                    text: 'üìû ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ¥ŸÖÿßÿ±Ÿá ŸÖŸàÿ®ÿß€åŸÑ',
                    request_contact: true,
                  },
                ],
              ],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          });
          await this.bot.pinChatMessage(chatId, sent.message_id);
          contactRequested.add(telegramID);
        }
      } else {
        // User is registered and has mobile, send greeting video and buttons
        await this.sendGreetingVideo(chatId, telegramID, userEntity.mobile, msg.from?.first_name || 'ÿØŸàÿ≥ÿ™ ÿπÿ≤€åÿ≤');
      }
    });

    // üîò Handle buttons
    this.bot.on('callback_query', async (query) => {
      const chatId = query.message?.chat.id;
      const telegramID = query.from?.id?.toString();

      if (!chatId || !telegramID) return;

      switch (query.data) {
        case 'btn_info':
          try {
            await this.bot.sendVideo(chatId, 'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4', {
              caption: 'üìò ÿ±ÿ®ÿßÿ™‚ÄåŸáÿß€å ŸÖÿß ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å€å Ÿáÿ≥ÿ™ŸÜÿØ ÿ®ÿ±ÿß€å ÿ™ÿ±€åÿØ ŸáŸàÿ¥ŸÖŸÜÿØ ÿØÿ± ⁄©ÿ±€åŸæÿ™Ÿàÿå ŸÅÿßÿ±⁄©ÿ≥ Ÿà ÿ∑ŸÑÿß.',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà', callback_data: 'btn_menu' },
                    { text: 'ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™', callback_data: 'btn_unlock' },
                  ],
                ],
              },
            });
          } catch (err) {
            this.logger.error('‚ùå Failed to send info video', err);
            await this.bot.sendMessage(chatId, '‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿà€åÿØ€åŸà. ŸÑÿ∑ŸÅÿßŸã ÿ®ÿπÿØÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿßŸÖÿ™ÿ≠ÿßŸÜ ⁄©ŸÜ€åÿØ.');
          }
          break;
        case 'btn_prices':
          try {
            await this.bot.sendVideo(chatId, 'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4', {
              caption: `üí∞ ŸÑ€åÿ≥ÿ™ ŸÇ€åŸÖÿ™‚ÄåŸáÿß ÿØÿ± ŸÑ€åŸÜ⁄© ÿ≤€åÿ±:\nhttps://trade-ai.link/prices`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà', callback_data: 'btn_menu' },
                    { text: 'ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™', callback_data: 'btn_unlock' },
                  ],
                ],
              },
            });
          } catch (err) {
            this.logger.error('‚ùå Failed to send prices video', err);
            await this.bot.sendMessage(chatId, '‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿà€åÿØ€åŸà. ŸÑÿ∑ŸÅÿßŸã ÿ®ÿπÿØÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿßŸÖÿ™ÿ≠ÿßŸÜ ⁄©ŸÜ€åÿØ.');
          }
          break;
        case 'btn_compare':
          try {
            await this.bot.sendVideo(chatId, 'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4', {
              caption: `üìä ŸÖŸÇÿß€åÿ≥Ÿá ⁄©ÿßŸÖŸÑ ÿ±ÿ®ÿßÿ™‚ÄåŸáÿß:\nhttps://trade-ai.link/compare`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà', callback_data: 'btn_menu' },
                    { text: 'ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™', callback_data: 'btn_unlock' },
                  ],
                ],
              },
            });
          } catch (err) {
            this.logger.error('‚ùå Failed to send compare video', err);
            await this.bot.sendMessage(chatId, '‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿà€åÿØ€åŸà. ŸÑÿ∑ŸÅÿßŸã ÿ®ÿπÿØÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿßŸÖÿ™ÿ≠ÿßŸÜ ⁄©ŸÜ€åÿØ.');
          }
          break;
        case 'btn_connect':
          try {
            await this.bot.sendVideo(chatId, 'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4', {
              caption: `üîå ÿ¢ŸÖŸàÿ≤ÿ¥ ÿßÿ™ÿµÿßŸÑ ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ÿµÿ±ÿßŸÅ€å ÿØÿ± ŸÑ€åŸÜ⁄© ÿ≤€åÿ±:\nhttps://trade-ai.link/connect`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà', callback_data: 'btn_menu' },
                    { text: 'ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™', callback_data: 'btn_unlock' },
                  ],
                ],
              },
            });
          } catch (err) {
            this.logger.error('‚ùå Failed to send connect video', err);
            await this.bot.sendMessage(chatId, '‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿà€åÿØ€åŸà. ŸÑÿ∑ŸÅÿßŸã ÿ®ÿπÿØÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿßŸÖÿ™ÿ≠ÿßŸÜ ⁄©ŸÜ€åÿØ.');
          }
          break;
        case 'btn_unlock':
          unlockedUsers.add(telegramID);
          await this.bot.sendMessage(chatId, 'üîì ÿß⁄©ŸÜŸàŸÜ ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿ≥ŸàÿßŸÑÿßÿ™ ÿÆŸàÿØ ÿ±ÿß ÿßÿ≤ ⁄ØŸÜÿ¨ŸàŸÑ ÿ®Ÿæÿ±ÿ≥€åÿØ! ‚ú®');
          break;
        case 'btn_menu':
          const firstName = query.from?.first_name || 'ÿØŸàÿ≥ÿ™ ÿπÿ≤€åÿ≤';
          try {
            await this.bot.sendVideo(chatId, 'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4', {
              caption: `üé¨ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ€åÿØ ${firstName}! ŸÖŸÜ ÿ±ÿ®ÿßÿ™ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å Ganjool Ÿáÿ≥ÿ™ŸÖ. ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ ÿßÿ≤ ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üß† ÿØÿ±ÿ®ÿßÿ±Ÿá ÿ±ÿ®ÿßÿ™‚ÄåŸáÿß', callback_data: 'btn_info' },
                    { text: 'üíµ ŸÇ€åŸÖÿ™‚ÄåŸáÿß', callback_data: 'btn_prices' },
                  ],
                  [{ text: 'üìä ŸÖŸÇÿß€åÿ≥Ÿá ŸÖÿ≠ÿµŸàŸÑÿßÿ™', callback_data: 'btn_compare' }],
                  [{ text: 'üîß ŸÜÿ≠ŸàŸá ÿßÿ™ÿµÿßŸÑ', callback_data: 'btn_connect' }],
                  [{ text: 'ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™', callback_data: 'btn_unlock' }],
                ],
              },
            });
          } catch (err) {
            this.logger.error('‚ùå Failed to send menu video', err);
            await this.bot.sendMessage(chatId, '‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿà€åÿØ€åŸà. ŸÑÿ∑ŸÅÿßŸã ÿ®ÿπÿØÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿßŸÖÿ™ÿ≠ÿßŸÜ ⁄©ŸÜ€åÿØ.');
          }
          break;
      }

      await this.bot.answerCallbackQuery(query.id);
    });

    this.bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      const telegramID = msg.from?.id?.toString();
      const telegramUserName = msg.from?.username || 'Unknown';
      const telegramFirstName = msg.from?.first_name || '';
      const telegramLastName = msg.from?.last_name || '';
      const telegramLanCode = msg.from?.language_code || 'en';
      const contactMobile = msg.contact?.phone_number || '';

      if (!telegramID) return;

      // ‚úÖ Handle Admin Commands for Prompts
      if (adminTelegramIds.includes(telegramID) && msg.text?.startsWith('/')) {
        const [cmd, ...args] = msg.text.split(' ');
        const full = msg.text.replace(cmd, '').trim();

        try {
          if (cmd === '/addprompt') {
            const [q, a] = full.split('=>').map(s => s.trim());
            await this.knowledgeService.createPrompt({ question: q, answer: a });
            await this.bot.sendMessage(chatId, `‚úÖ Prompt added.`);
            return;
          }
          if (cmd === '/updateprompt') {
            const [q, a] = full.split('=>').map(s => s.trim());
            await this.knowledgeService.updatePromptByQuestion(q, a);
            await this.bot.sendMessage(chatId, `üîÑ Prompt updated.`);
            return;
          }
          if (cmd === '/deleteprompt') {
            await this.knowledgeService.deletePromptByQuestion(full);
            await this.bot.sendMessage(chatId, `üóëÔ∏è Prompt deleted.`);
            return;
          }
          if (cmd === '/listprompts') {
            const prompts = await this.knowledgeService.getPromptList(10);
            const text = prompts
              .map((p, i) => `${i + 1}. ${p.question}\nüìé ${p.answer}`)
              .join('\n\n');
            await this.bot.sendMessage(chatId, `üìö Prompts:\n${text}`);
            return;
          }
        } catch (err) {
          this.logger.error('‚ùå Admin prompt command failed', err);
          await this.bot.sendMessage(chatId, `‚ùå Error: ${err.message}`);
          return;
        }
      }

      const userEntity = await this.iamService.findUserByTelegramID(telegramID);
      const userMobile = userEntity?.mobile || contactMobile;

      if (!userMobile) {
        if (!contactRequested.has(telegramID)) {
          const sent = await this.bot.sendMessage(chatId, 'ÿ®ÿ±ÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÑÿ∑ŸÅÿßŸã ÿ¥ŸÖÿßÿ±Ÿá ŸÖŸàÿ®ÿß€åŸÑ ÿÆŸàÿØ ÿ±ÿß ÿ®Ÿá ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®⁄Øÿ∞ÿßÿ±€åÿØ.', {
            reply_markup: {
              keyboard: [
                [
                  {
                    text: 'üìû ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ¥ŸÖÿßÿ±Ÿá ŸÖŸàÿ®ÿß€åŸÑ',
                    request_contact: true,
                  },
                ],
              ],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          });
          await this.bot.pinChatMessage(chatId, sent.message_id);
          contactRequested.add(telegramID);
        } else {
          await this.bot.sendMessage(chatId, 'ŸÑÿ∑ŸÅÿßŸã ÿ¥ŸÖÿßÿ±Ÿá ŸÖŸàÿ®ÿß€åŸÑ ÿÆŸàÿØ ÿ±ÿß ÿ®Ÿá ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®⁄Øÿ∞ÿßÿ±€åÿØ ÿ™ÿß ÿßÿØÿßŸÖŸá ÿØŸá€åŸÖ.');
        }
        return;
      }

      // Clear the contact request flag once mobile is available
      contactRequested.delete(telegramID);

      const userInsertDto = {
        telegramID,
        mobile: userMobile,
        chatId: chatId.toString(),
        telegramUserName,
        telegramFirstName,
        telegramLastName,
        telegramLanCode,
        clientSecret: process.env.NEXT_PUBLIC_APP_SECRET,
        alias: '',
      };

      try {
        const { userId } = await this.iamService.registerOrLogin(userInsertDto);

        if (msg.contact) {
          // üìπ Send greeting video and buttons after contact is shared
          await this.sendGreetingVideo(chatId, telegramID, userMobile, telegramFirstName);
          return;
        }

        if (!unlockedUsers.has(telegramID) && msg.text) {
          await this.bot.sendMessage(chatId, '‚õî ŸÑÿ∑ŸÅÿßŸã ÿßÿ®ÿ™ÿØÿß ÿØ⁄©ŸÖŸá "ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™" ÿ±ÿß ŸÅÿ¥ÿßÿ± ÿØŸá€åÿØ ÿ™ÿß ⁄Üÿ™ ŸÅÿπÿßŸÑ ÿ¥ŸàÿØ.');
          return;
        }

        if (msg.text && unlockedUsers.has(telegramID)) {
          const timestamp = Math.floor(Date.now() / 1000);

          const messages = [
            {
              role: 'system' as const,
              content: `üß† ÿ¥ŸÖÿß ÿØÿ≥ÿ™€åÿßÿ± ŸáŸàÿ¥ŸÖŸÜÿØ ÿ¥ÿ±⁄©ÿ™ Trade-AI Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ÿ±ÿ®ÿßÿ™‚ÄåŸáÿß€å ÿ™ÿ±€åÿØ Ÿà ÿ≥€å⁄ØŸÜÿßŸÑ ŸáŸàÿ¥ŸÖŸÜÿØ ÿßÿ±ÿßÿ¶Ÿá ŸÖ€å‚ÄåÿØŸáÿØ. ÿßÿ®ÿ™ÿØÿß ÿÆŸàÿØ ÿ±ÿß ŸÖÿπÿ±ŸÅ€å ⁄©ŸÜ Ÿà ŸÖÿ≠ÿµŸàŸÑÿßÿ™ ÿ±ÿß ŸÖÿπÿ±ŸÅ€å ⁄©ŸÜ. ÿØÿ± ÿµŸàÿ±ÿ™ Ÿæÿ±ÿ≥ÿ¥ ÿØÿ±ÿ®ÿßÿ±Ÿá ŸÖÿ≠ÿµŸàŸÑÿßÿ™ÿå ŸÖŸÇÿß€åÿ≥Ÿá ⁄©ŸÜ Ÿà ŸÑ€åŸÜ⁄© ÿßÿ±ÿßÿ¶Ÿá ÿ®ÿØŸá. Ÿæÿßÿ≥ÿÆ‚ÄåŸáÿß ÿ®ÿß€åÿØ ŸÅÿßÿ±ÿ≥€åÿå ÿµŸÖ€åŸÖ€å Ÿà ÿØŸÇ€åŸÇ ÿ®ÿßÿ¥ŸÜÿØ.`,
            },
            {
              role: 'user' as const,
              content: msg.text,
            },
          ];

          const completion = await this.openai.chat.completions.create({
            model: 'gpt-4o',
            messages,
          });

          const aiReply = completion.choices[0].message.content?.trim() || 'ü§ñ Ÿæÿßÿ≥ÿÆ€å Ÿæ€åÿØÿß ŸÜÿ¥ÿØ.';
          await this.bot.sendMessage(chatId, aiReply);

          const chatLog: SupportChatLogDto = {
            userId,
            telegramId: telegramID,
            chatId: chatId.toString(),
            query: msg.text,
            response: aiReply,
            save_at: timestamp,
            source: 'telegram',
          };

          await this.dataService.logSupportChat(chatLog);
        }
      } catch (err) {
        this.logger.error('‚ùå Failed to register/login user', err);
        await this.bot.sendMessage(chatId, '‚ùå ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™. ŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.');
      }
    });

    
  }

  // Helper method to send greeting video and buttons
    async sendGreetingVideo(chatId: number, telegramID: string, mobile: string, firstName: string) {
      try {
        await this.bot.sendVideo(chatId, 'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4', {
          caption: `üé¨ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ€åÿØ ${firstName}! ŸÖŸÜ ÿ±ÿ®ÿßÿ™ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å Ganjool Ÿáÿ≥ÿ™ŸÖ. ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ ÿßÿ≤ ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:`,
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üß† ÿØÿ±ÿ®ÿßÿ±Ÿá ÿ±ÿ®ÿßÿ™‚ÄåŸáÿß', callback_data: 'btn_info' },
                { text: 'üíµ ŸÇ€åŸÖÿ™‚ÄåŸáÿß', callback_data: 'btn_prices' },
              ],
              [{ text: 'üìä ŸÖŸÇÿß€åÿ≥Ÿá ŸÖÿ≠ÿµŸàŸÑÿßÿ™', callback_data: 'btn_compare' }],
              [{ text: 'üîß ŸÜÿ≠ŸàŸá ÿßÿ™ÿµÿßŸÑ', callback_data: 'btn_connect' }],
              [{ text: 'ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™', callback_data: 'btn_unlock' }],
            ],
          },
        });
      } catch (err) {
        this.logger.error('‚ùå Failed to send greeting video', err);
        await this.bot.sendMessage(chatId, '‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿà€åÿØ€åŸà ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ⁄ØŸà€å€å. ŸÑÿ∑ŸÅÿßŸã ÿ®ÿπÿØÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿßŸÖÿ™ÿ≠ÿßŸÜ ⁄©ŸÜ€åÿØ.');
      }
    }
}